
Start epoch #1, learning rate for this epoch: [0.0002]
Train Epoch: 1 [40/800 (5.0%)]	Loss: 1.8955
Train Epoch: 1 [80/800 (10.0%)]	Loss: 1.9623
Train Epoch: 1 [120/800 (15.0%)]	Loss: 1.8596
Train Epoch: 1 [160/800 (20.0%)]	Loss: 1.6618
Train Epoch: 1 [200/800 (25.0%)]	Loss: 1.5906
Train Epoch: 1 [240/800 (30.0%)]	Loss: 2.1991
Train Epoch: 1 [280/800 (35.0%)]	Loss: 1.4905
Train Epoch: 1 [320/800 (40.0%)]	Loss: 1.4360
Train Epoch: 1 [360/800 (45.0%)]	Loss: 1.5152
Train Epoch: 1 [400/800 (50.0%)]	Loss: 1.4984
Train Epoch: 1 [440/800 (55.0%)]	Loss: 1.6403
Train Epoch: 1 [480/800 (60.0%)]	Loss: 1.4223
Train Epoch: 1 [520/800 (65.0%)]	Loss: 1.4620
Train Epoch: 1 [560/800 (70.0%)]	Loss: 1.5072
Train Epoch: 1 [600/800 (75.0%)]	Loss: 1.4965
Train Epoch: 1 [640/800 (80.0%)]	Loss: 1.3796
Train Epoch: 1 [680/800 (85.0%)]	Loss: 1.7157
Train Epoch: 1 [720/800 (90.0%)]	Loss: 1.6782
Train Epoch: 1 [760/800 (95.0%)]	Loss: 1.4160
Train Epoch: 1 [800/800 (100.0%)]	Loss: 1.5641
Done epoch #1, time for this epoch: 84.9140305519104s
Epoch 1: loss: 1.6185, train accuracy: 5437893.7500, valid accuracy:5496287.5000
=========================END STEP 2=========================
[PROGRESS] STEP 3: Plotting diagrams...
Traceback (most recent call last):
  File "/home/wallace/Code/HUST/UNET/main.py", line 126, in <module>
    utils.result_visualization(model=model, device=device, train_dataloader=train_dataloader)
  File "/home/wallace/Code/HUST/UNET/utilities/utils.py", line 82, in result_visualization
    arr[i][1].imshow(F.one_hot(mask[i]).float())
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/matplotlib/__init__.py", line 1465, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/matplotlib/axes/_axes.py", line 5756, in imshow
    im.set_data(X)
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/matplotlib/image.py", line 723, in set_data
    self._A = self._normalize_image_array(A)
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/matplotlib/image.py", line 686, in _normalize_image_array
    A = cbook.safe_masked_invalid(A, copy=True)
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/matplotlib/cbook.py", line 733, in safe_masked_invalid
    x = np.array(x, subok=True, copy=copy)
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/torch/_tensor.py", line 1030, in __array__
    return self.numpy()
TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.