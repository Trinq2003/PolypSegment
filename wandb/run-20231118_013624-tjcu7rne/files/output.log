
Start epoch #1, learning rate for this epoch: [0.0002]
Train Epoch: 1 [40/800 (5.0%)]	Loss: 6.6790
Train Epoch: 1 [80/800 (10.0%)]	Loss: 6.6187
Train Epoch: 1 [120/800 (15.0%)]	Loss: 6.6063
Train Epoch: 1 [160/800 (20.0%)]	Loss: 6.6005
Train Epoch: 1 [200/800 (25.0%)]	Loss: 6.5979
Train Epoch: 1 [240/800 (30.0%)]	Loss: 6.5974
Train Epoch: 1 [280/800 (35.0%)]	Loss: 6.5940
Train Epoch: 1 [320/800 (40.0%)]	Loss: 6.5941
Train Epoch: 1 [360/800 (45.0%)]	Loss: 6.5932
Train Epoch: 1 [400/800 (50.0%)]	Loss: 6.5934
Train Epoch: 1 [440/800 (55.0%)]	Loss: 6.5930
Train Epoch: 1 [480/800 (60.0%)]	Loss: 6.5931
Train Epoch: 1 [520/800 (65.0%)]	Loss: 6.5932
Train Epoch: 1 [560/800 (70.0%)]	Loss: 6.5931
Train Epoch: 1 [600/800 (75.0%)]	Loss: 6.5927
Train Epoch: 1 [640/800 (80.0%)]	Loss: 6.5923
Train Epoch: 1 [680/800 (85.0%)]	Loss: 6.5924
Train Epoch: 1 [720/800 (90.0%)]	Loss: 6.5924
Train Epoch: 1 [760/800 (95.0%)]	Loss: 6.5925
Train Epoch: 1 [800/800 (100.0%)]	Loss: 6.5923
Done epoch #1, time for this epoch: 146.35668277740479s
Epoch 1: loss: 6.6098, train accuracy: 2115919.6250, valid accuracy:2094308.5000
=========================END STEP 2=========================
[PROGRESS] STEP 3: Plotting diagrams...
=========================END STEP 3=========================
[PROGRESS] STEP 4: Testing...
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Traceback (most recent call last):
  File "/home/wallace/Code/HUST/UNET/main.py", line 172, in <module>
    utils.save_prediction_image(model=model, device=device, test_dataloader=test_dataloader, infer_path=inference_path)
  File "/home/wallace/Code/HUST/UNET/utilities/utils.py", line 108, in save_prediction_image
    for _, (img, path, H, W) in enumerate(test_dataloader):
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 630, in __next__
    data = self._next_data()
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/torch/utils/data/dataloader.py", line 674, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/wallace/Code/HUST/UNET/data/test_dataloader.py", line 20, in __getitem__
    data = self.transform(data) / 255
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/torchvision/transforms/transforms.py", line 95, in __call__
    img = t(img)
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/torchvision/transforms/transforms.py", line 277, in forward
    return F.normalize(tensor, self.mean, self.std, self.inplace)
  File "/home/wallace/miniconda3/envs/deep_learning_project/lib/python3.10/site-packages/torchvision/transforms/functional.py", line 361, in normalize
    raise TypeError(f"img should be Tensor Image. Got {type(tensor)}")
TypeError: img should be Tensor Image. Got <class 'PIL.Image.Image'>